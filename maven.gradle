apply plugin: 'com.android.library'
apply plugin: 'maven-publish'
apply plugin: 'signing'

group = GROUP
version = VERSION_NAME

publishing {
    publications {
        release(MavenPublication) {
            afterEvaluate {
                from components.findByName('release')
            }

            groupId = GROUP
            artifactId = project.name
            version = VERSION_NAME
            artifact("$buildDir/outputs/aar/${project.name}-release.aar")
            artifact("$buildDir/libs/${project.name}-${version}-javadoc.jar") {
                classifier "javadoc"
            }
            artifact("$buildDir/libs/${project.name}-${version}-sources.jar") {
                classifier "sources"
            }

            pom {
                name.set(project.name)
                description.set(POM_DESCRIPTION)
                url.set(POM_URL)
                packaging = POM_PACKAGING

                scm {
                    url.set(POM_SCM_URL)
                    connection.set(POM_SCM_CONNECTION)
                    developerConnection.set(POM_SCM_DEV_CONNECTION)
                }

                licenses {
                    license {
                        name.set(POM_LICENCE_NAME)
                        url.set(POM_LICENCE_URL)
                        distribution.set(POM_LICENCE_DIST)
                    }
                }

                developers {
                    developer {
                        id.set(POM_DEVELOPER_ID)
                        name.set(POM_DEVELOPER_NAME)
                        email.set(POM_DEVELOPER_EMAIL)
                    }
                }

                withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')
                    configurations.implementation.allDependencies.each { dep ->
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', dep.group)
                        dependencyNode.appendNode('artifactId', dep.name)
                        dependencyNode.appendNode('version', dep.version)
                        dependencyNode.appendNode('scope', 'runtime')
                        dependencyNode.appendNode('optional', 'true')
                    }
                }
            }
        }
        debug(MavenPublication) {
            afterEvaluate {
                from components.findByName('debug')
            }

            groupId = GROUP
            artifactId = project.name
            version = VERSION_NAME
            artifact("$buildDir/outputs/aar/${project.name}-debug.aar")
            artifact("$buildDir/libs/${project.name}-${version}-javadoc.jar") {
                classifier "javadoc"
            }
            artifact("$buildDir/libs/${project.name}-${version}-sources.jar") {
                classifier "sources"
            }

            pom {
                name.set(project.name)
                description.set(POM_DESCRIPTION)
                url.set(POM_URL)
                packaging = POM_PACKAGING

                scm {
                    url.set(POM_SCM_URL)
                    connection.set(POM_SCM_CONNECTION)
                    developerConnection.set(POM_SCM_DEV_CONNECTION)
                }

                licenses {
                    license {
                        name.set(POM_LICENCE_NAME)
                        url.set(POM_LICENCE_URL)
                        distribution.set(POM_LICENCE_DIST)
                    }
                }

                developers {
                    developer {
                        id.set(POM_DEVELOPER_ID)
                        name.set(POM_DEVELOPER_NAME)
                        email.set(POM_DEVELOPER_EMAIL)
                    }
                }

                withXml {
                    def dependenciesNode = asNode().appendNode('dependencies')
                    configurations.implementation.allDependencies.each { dep ->
                        def dependencyNode = dependenciesNode.appendNode('dependency')
                        dependencyNode.appendNode('groupId', dep.group)
                        dependencyNode.appendNode('artifactId', dep.name)
                        dependencyNode.appendNode('version', dep.version)
                    }
                }
            }
        }
    }

    repositories {
        maven {
            url = uri(RELEASE_REPOSITORY_URL)
            credentials {
                username = getRepositoryUsername()
                password = getRepositoryPassword()
            }
        }
        maven {
            url = uri(SNAPSHOT_REPOSITORY_URL)
            credentials {
                username = getRepositoryUsername()
                password = getRepositoryPassword()
            }
        }
    }
}

signing {
    sign publishing.publications.release
}

tasks.register("androidJavadocs", Javadoc) {
    dependsOn ':assembleRelease'
    classpath += project.files(android.getBootClasspath().join(File.pathSeparator))
    classpath += project.files('build/generated/source/buildConfig/release')
    classpath += project.files(android.sourceSets.main.java.srcDirs)
    source = android.sourceSets.main.java.srcDirs

    android.libraryVariants.all { variant ->
        if (variant.name == 'release') {
            classpath += variant.javaCompileProvider.get().classpath
        }
    }

    exclude(
            '**/R.*',
            '**/util/Base64Coder.java',
            '**/util/HttpService.java',
            '**/util/RemoteService.java',
            '**/ResourceIds.java',
            '**/ResourceReader.java',
            '**/*.md'
    )

    options {
        encoding = 'UTF-8'
        docEncoding = 'UTF-8'
        charSet = 'UTF-8'
    }
}

tasks.register("androidJavadocsJar", Jar) {
    dependsOn ':androidJavadocs'
    archiveClassifier.set('javadoc')
    from tasks.named("androidJavadocs").get().destinationDir
}

tasks.register("androidSourcesJar", Jar) {
    archiveClassifier.set('sources')
    from android.sourceSets.main.java.srcDirs
}

tasks.register('install') { // for deploying snapshot build to local .m2 folder
    dependsOn 'build', 'androidJavadocsJar', 'androidSourcesJar', 'publishDebugPublicationToMavenLocal'
}

tasks.register('publishRelease') {  // for release
    dependsOn 'publishReleasePublicationToMavenRepository'
}

tasks.named('publishDebugPublicationToMavenLocal') {
    dependsOn 'androidJavadocsJar', 'androidSourcesJar', 'bundleDebugAar'
}

tasks.named('signReleasePublication') {
    dependsOn 'build', 'androidJavadocsJar', 'androidSourcesJar', 'bundleReleaseAar'
}

def getRepositoryUsername() {
    return hasProperty('sonatypeUsername') ? sonatypeUsername : ""
}

def getRepositoryPassword() {
    return hasProperty('sonatypePassword') ? sonatypePassword : ""
}
